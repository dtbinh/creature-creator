/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package generationModele;

import java.awt.Color;
import java.util.*;

/**
 *<b>Norm is a class which represents an norm.</b>
 * <p>
 * A norm consists of :
 * <ul>
 * <li>A name which is assigned at its creation.</li>
 * <li>A institution mother which is assigned at its creation.</li>
 * <li>A list of institutional paramaters.</li>
 * <li>A list of environnemental paramaters.</li>
 * </ul>
 * </p>
 * <p>
 * It's possible to add parameters to or remove parameters from a norm with constraints .
 * </p>
 * @author mmacret
 */
public class Norm {

    /**
     * Name of a norm. It's assigned at its creation.
     *
     * @see Norm#getName()
     * @see Norm#Norm(java.lang.String, modele_creature.Institution) nor
     */
    private String name;
    /**
     * The Institution on which the norm is dependant.
     * It's defined at its creation.
     *
     * @see Norm#getMotherInstitution()
     * @see Norm#Norm(java.lang.String, modele_creature.Institution) no
     */
    private Institution motherInstitution;
    /**
     * HashMap of norm parameters.
     * The key is the name of the parameter and the value is the parameter.
     * It's possible to add or remove parameters only if they still belong to the
     * Institution mother.
     *
     * @see Norm#addParameter(java.lang.String, modele_creature.Parameter)
     * @see Norm#getInstitutionalParameters()
     *
     */
    private HashMap<String, Parameter> institutionalParameters = new HashMap<String, Parameter>();
    /**
     * HashMap of norm parameters.
     * The key is the name of the parameter and the value is the parameter.
     * It's possible to add or remove parameters only if they still belong to the
     * Institution mother.
     *
     * @see Norm#addParameter(java.lang.String, modele_creature.Parameter)
     * @see Norm#getEnvironnementParameters()
     * @see Parameter
     *
     */
    private HashMap<String, Parameter> environnementParameters = new HashMap<String, Parameter>();
    /**
     * Color of all the agents generated by the norm.
     *
     * @see Norm#Norm(java.lang.String, generationModele.Institution)
     */
    private Color color;

    /**
     * Norm Constructor.
     * You must specify as parameter its name, its institution mother and its color.
     *
     * @param name
     *      Name of the norm.
     * @param motherInstitution
     *      Institution mother of the norm.
     *
     * @see Norm#name
     * @see Norm#motherInstitution
     * @see Institution
     * @see Parameter
     */
    /**
     * Tendancy of a norm to generate violating agent.
     */
    private double to = 1.0;

    public Norm(String name, Institution motherInstitution) {
        this.name = name;
        this.motherInstitution = motherInstitution;

        RandomColor randomColor = new RandomColor();
        this.color = randomColor.randomColor();
    }
    public Norm(String name, Institution motherInstitution,Color color) {
        this.name = name;
        this.motherInstitution = motherInstitution;


        this.color = color;
    }
/**
 * Copy Constructor
 * @param norme
 */
    public Norm(Norm norme) {
        this.name = norme.getName();
        this.motherInstitution = norme.getMotherInstitution();
        this.environnementParameters = new HashMap<String, Parameter>(norme.getEnvironnementParameters());
        this.institutionalParameters = new HashMap<String, Parameter>(norme.getInstitutionalParameters());
        this.color = norme.color;
    }

    /**
     * Return the institution mother of the present norm.
     * @return the institution mother.
     */
    public Institution getMotherInstitution() {
        return motherInstitution;
    }

    public double getTo() {
        return to;
    }

    public void setTo(double to) {
        this.to = to;
    }

    /**
     * Return the list of the environnemental parameters which compose the norm
     * @return A HashMap of the environnemental parameters
     *
     * @see Norm#environnementParameters
     */
    public HashMap<String, Parameter> getEnvironnementParameters() {
        return environnementParameters;
    }

    /**
     * Return the list of the institutional parameters which compose the norm
     * @return A HashMap of the institutional parameters
     *
     * @see Norm#institutionalParameters
     * @see Parameter
     */
    public HashMap<String, Parameter> getInstitutionalParameters() {
        return institutionalParameters;
    }

    /**
     * Return the name of the norm
     * @return
     *      Name of the norm.
     *
     * @see Norm#name
     */
    public String getName() {
        return name;
    }

    /**
     * Return the color of all the agents of the norm.
     * @return
     *      Color
     */
    public Color getColor() {
        return color;
    }

    /**
     * Add a parameter to the institutional parameters hashMap or to the environnemental
     * parameters hashMap.
     * @param type
     *      Specify in which hashMap adding the parameter.
     *      Accepted strings : "institutional" or "environnement"
     * @param parameter
     *      The parameter to add.
     * @throws java.lang.Exception
     *      Raise an exception if the type is different from "institutional" or from "environnement".
     *      Raise an exception if the parameter you want to add don't already belong to the
     * Institution mother.
     *
     *@see Parameter
     */
    public void addParameter(String type, Parameter parameter) throws Exception {
        if (type.equals("institutional")) {

            if (this.getMotherInstitution().getInstitutionalParameters().containsKey(parameter.getName())) {
                this.institutionalParameters.put(parameter.getName(), parameter);
            } else {
                throw new Exception("Le paramètre voulant être ajouté à la norme n'appartient pas à l'institution mère");
            }
        } else if (type.equals("environnement")) {
            if (this.getMotherInstitution().getEnvironnementParamaters().containsKey(parameter.getName())) {
                this.environnementParameters.put(parameter.getName(), parameter);
            } else {
                throw new Exception("Le paramètre voulant être ajouté à la norme n'appartient pas à l'institution mère");
            }
        } else {
            throw new Exception("Le type doit être 'institutional' ou 'environnement'");
        }
    }

    public void setName(String name) {
        this.name = name;
    }

    public static void main(String[] args) throws Exception {
        Institution institution = new Institution("test");
        InstitutionalParameter parametre1 = new InstitutionalParameter("parameter", -12, 12);
        InstitutionalParameter parametre2 = new InstitutionalParameter("parameter4", -12, 12);
        InstitutionalParameter parametre3 = new InstitutionalParameter("parameter3", -12, 52);
        institution.addparameter("institutional", parametre1);
        institution.addparameter("institutional", parametre2);
        institution.addparameter("institutional", parametre3);

        Norm norme = new Norm("Norme1", institution);
        norme.addParameter("institutional", new Parameter(-10, 10, 5, parametre1));
//        norme.addParameter("institutional", new Parameter(-10,10,5,parametre2));
        norme = norme.completeNorm();
        ArrayList<Norm> norms = new ArrayList<Norm>();
        norms.add(norme);

        for(Norm u : norms){
         System.out.println(u.getInstitutionalParameters().get("parameter3").getDefinitionSet().getBorneSup());
        }
        
    }

    public Norm completeNorm() throws Exception {
        Norm completedNorm = new Norm(this);

        for (InstitutionalParameter keys : this.getMotherInstitution().getEnvironnementParamaters().values()) {
            if (!completedNorm.environnementParameters.containsKey(keys.getName())) {
                completedNorm.environnementParameters.put(keys.getName(), new Parameter(keys));
            }

        }
        for (InstitutionalParameter keys : this.getMotherInstitution().getInstitutionalParameters().values()) {
            if (!completedNorm.institutionalParameters.containsKey(keys.getName())) {
                completedNorm.institutionalParameters.put(keys.getName(), new Parameter(keys));
            }
        }
        return completedNorm;
    }

    @Override
    public String toString() {
        return name;
    }
}

